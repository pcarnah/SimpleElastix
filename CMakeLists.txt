cmake_minimum_required ( VERSION 3.10 FATAL_ERROR )

# Explicitly add INCREMENTAL linking option to command lines.
# http://www.cmake.org/pipermail/cmake/2010-February/035174.html
SET(MSVC_INCREMENTAL_DEFAULT ON)

project ( SimpleElastix )

cmake_policy( VERSION 3.10 )

foreach(p
    )
  if(POLICY ${p})
    cmake_policy(SET ${p} NEW)
  endif()
endforeach()

# Include extra CMake files
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/CMake")

#-----------------------------------------------------------
# Check and set required flags for compilation
# This must be done before any other try compiles based tests are
# done.
include(sitkCheckRequiredFlags)
include(sitkCompilerWarningsSettings)

include( sitkSITKLegacyNaming )
include( sitkForbidDownloadsOption )
include( sitkTargetUseITK )

#-----------------------------------------------------------
# Configure SimpleITK

find_package(SimpleITK REQUIRED)
include(${SimpleITK_USE_FILE})

find_package(ITK REQUIRED )
#we require certain packages be turned on in ITK
include(sitkCheckForITKModuleDependencies)

if(ITK_FOUND)
  # NOTE: We are purposely not calling UseITK yet. However, we must make
  # sure the requred compilation and linker flags are set. Since, we
  # are trying to encapsulate ITK, we need to very carefully control
  # in access to the headers and libraries, hence each SimpleITK
  # library will call UseITK.

  # Add compiler flags needed to use ITK.
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${ITK_REQUIRED_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ITK_REQUIRED_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}")
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${ITK_REQUIRED_LINK_FLAGS}")

  link_directories( "${ITK_LIBRARY_DIRS}")
endif()


list(APPEND SimpleITK_PRIVATE_COMPILE_OPTIONS ${CXX_ADDITIONAL_WARNING_FLAGS})

#-----------------------------------------------------------
# Configure Elastix

find_package(Elastix REQUIRED)
include(${ELASTIX_USE_FILE})

if(ELASTIX_USE_OPENMP)
  find_package(OpenMP QUIET)
  if( OPENMP_FOUND )
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  endif()
endif()

# Check if libraries are available
if(ELASTIX_BUILD_EXECUTABLE)
  message(FATAL_ERROR "SimpleElastix requires elastix libraries, please set ELASTIX_BUILD_EXECUTABLE=OFF and rebuild elastix.")
endif()




#----------------------------------------------------------
# Place all options to go into sitkConfigure.h here
option(BUILD_SHARED_LIBS "Build SimpleITK ITK with shared libraries. This does not effect wrapped languages." OFF)
set(SITK_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})


option(SimpleITK_EXPLICIT_INSTANTIATION "Enable an ITK static library of explicitly instantiated templates." ON)
sitk_legacy_naming(SimpleITK_EXPLICIT_INSTANTIATION)

if ( MSVC AND SITK_BUILD_SHARED_LIBS )
  set( SITK_SimpleITKExplit_STATIC 1 )
endif()

set( SimpleITK_INT64_PIXELIDS_DEFAULT ON )
if( MSVC )
  # See http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:MSVC_VERSION
  # and https://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Version_history
  #   1500 = VS  9.0 (Visual Studio 2008)
  #   1600 = VS 10.0 (Visual Studio 2010)
  #   1700 = VS 11.0 (Visual Studio 2012)
  if(MSVC_VERSION VERSION_LESS 1600)
    # with this option on the linker runs out of memory
    set( SimpleITK_INT64_PIXELIDS_DEFAULT OFF )
  endif()
endif()
option( SimpleITK_INT64_PIXELIDS "Instantiate 64-bit integer pixels, including unsigned, vector and label maps."
  ${SimpleITK_INT64_PIXELIDS_DEFAULT} )
sitk_legacy_naming(SimpleITK_INT64_PIXELIDS)



set(SimpleITK_4D_IMAGES_DEFAULT ON)
# 1900 = VS 14.0 (Visual Studio 2015)
if(MSVC AND MSVC_VERSION VERSION_LESS 1900)
  set( SimpleITK_4D_IMAGES_DEFAULT OFF )
  message("disable")
endif()
option( SimpleITK_4D_IMAGES "Add Image and I/O support for four spatial dimensions." ${SimpleITK_4D_IMAGES_DEFAULT} )
mark_as_advanced( SimpleITK_4D_IMAGES )
sitk_legacy_naming( SimpleITK_4D_IMAGES )


# Setup build locations.
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
endif()
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
endif()

set ( SimpleElastix_SOURCE_DIR ${CMAKE_SOURCE_DIR} )
set ( SimpleElastix_BINARY_DIR ${CMAKE_BINARY_DIR} )
set ( SimpleElastix_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Elastix/include )
set ( SimpleElastix_LIBRARIES ElastixImageFilter TransformixImageFilter )


# Be sure to clear these each time
set ( GENERATED_TEST_LIST "" CACHE INTERNAL "" )
set ( GENERATED_FILTER_LIST "" CACHE INTERNAL "" )
set ( GENERATED_TEST_SOURCE_LIST "" CACHE INTERNAL "" )

#------------------------------------------------------------------------------
# Variables for use in install rules:

if(NOT SimpleElastix_INSTALL_RUNTIME_DIR)
  set(SimpleElastix_INSTALL_RUNTIME_DIR "bin")
endif()
if(NOT SimpleElastix_INSTALL_LIBRARY_DIR)
  set(SimpleElastix_INSTALL_LIBRARY_DIR "lib")
endif()
if(NOT SimpleElastix_INSTALL_ARCHIVE_DIR)
  set(SimpleElastix_INSTALL_ARCHIVE_DIR "lib")
endif()
if(NOT SimpleElastix_INSTALL_INCLUDE_DIR)
  set(SimpleElastix_INSTALL_INCLUDE_DIR "include/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}")
endif()
if(NOT SimpleElastix_INSTALL_DOC_DIR)
  set(SimpleElastix_INSTALL_DOC_DIR share/doc/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR})
endif()
if(NOT SimpleElastix_INSTALL_PACKAGE_DIR)
  set(SimpleElastix_INSTALL_PACKAGE_DIR "${SimpleElastix_INSTALL_LIBRARY_DIR}/cmake/SimpleITK-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR}")
endif()

function(sitk_install_exported_target tgt)
  # Remove the build tree's SimpleElastixTargets file if this is the first call:
  get_property(first_time GLOBAL PROPERTY SimpleITK_FIRST_EXPORTED_TARGET)
  if(NOT first_time)
    file(REMOVE ${CMAKE_BINARY_DIR}/SimpleElastixTargets.cmake)
    set_property(GLOBAL PROPERTY SimpleITK_FIRST_EXPORTED_TARGET 1)
  endif()

  get_target_property( type ${tgt} TYPE )
  if (type STREQUAL "STATIC_LIBRARY" OR
      type STREQUAL "MODULE_LIBRARY" OR
      type STREQUAL "SHARED_LIBRARY")
    set_property(TARGET ${tgt} PROPERTY VERSION 1)
    set_property(TARGET ${tgt} PROPERTY SOVERSION 1)
    set_property(TARGET ${tgt} PROPERTY
      OUTPUT_NAME ${tgt}-${SimpleITK_VERSION_MAJOR}.${SimpleITK_VERSION_MINOR})
  endif()

  export(TARGETS ${tgt}
    APPEND FILE "${CMAKE_BINARY_DIR}/SimpleElastixTargets.cmake"
    )

  install(TARGETS ${tgt}
    EXPORT SimpleElastixTargets
    RUNTIME DESTINATION ${SimpleElastix_INSTALL_RUNTIME_DIR} COMPONENT Runtime
    LIBRARY DESTINATION ${SimpleElastix_INSTALL_LIBRARY_DIR} COMPONENT Runtime
    ARCHIVE DESTINATION ${SimpleElastix_INSTALL_ARCHIVE_DIR} COMPONENT Development
    )
endfunction()

include(sitkStripOption)


#------------------------------------------------------------------------------
# These are some system specific compiler options needed to build SimpleITK

include(CheckCXXCompilerFlag)

if( NOT DEFINED CMAKE_POSITION_INDEPENDENT_CODE )
  set( CMAKE_POSITION_INDEPENDENT_CODE 1 )
endif()


if( NOT DEFINED CMAKE_C_VISIBILITY_PRESET )
  set(CMAKE_C_VISIBILITY_PRESET hidden)
endif()

if( NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET )
  set(CMAKE_CXX_VISIBILITY_PRESET hidden)
endif()

if( NOT DEFINED CMAKE_VISIBILITY_INLINES_HIDDEN )
  set( CMAKE_VISIBILITY_INLINES_HIDDEN 1 )
endif()


#-----------------------------------------------------------
# Place all checks and try compile variable for sitkConfigure.h here

include(sitkCheckCXX11)


include(CheckIncludeFileCXX)


# check for stdint
# This generates a configuration error if the compiler is not supported
check_include_file_cxx( stdint.h SITK_HAS_STDINT_H )
if(NOT SITK_HAS_STDINT_H)
    if(MSVC)
      add_subdirectory("${SimpleITK_SOURCE_DIR}/Utilities/C99")
    else()
      message(FATAL_ERROR "Unable to find require \"stdint.h\" header file.")
    endif()
endif()



#
# Only append file if it exists
#
function(append_if_exists list_var file)
   if( EXISTS ${file} )
     list( APPEND ${list_var} ${file} )
     set( ${list_var} ${${list_var}} PARENT_SCOPE )
   endif()
endfunction()

foreach( _p IN LISTS _itk_doc_search_paths)
  if( EXISTS "${_p}/NOTICE" )
    append_if_exists(ITK_DOC_FILES "${_p}/NOTICE")
    append_if_exists(ITK_DOC_FILES "${_p}/README.txt")
    append_if_exists(ITK_DOC_FILES "${_p}/README.md")
    break()
  endif()
endforeach()

if( NOT ITK_DOC_FILES )
  message( WARNING "Unable to file ITK's NOTICE File!\n This file will not be included in SimpleITK packaging!" )
endif()


foreach(_f IN LISTS ITK_DOC_FILES)
  get_filename_component( _name "${_f}" NAME )
  set( _o "${CMAKE_CURRENT_BINARY_DIR}/ITK-${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}-${_name}" )
  configure_file( "${_f}"  "${_o}" )
  list( APPEND SimpleITK_DOC_FILES "${_o}" )
endforeach()


#------------------------------------------------------------------------------
# Set up wrapping.
#
# Use CMake file which present options for wrapped languages, and finds languages as needed
#
include(sitkLanguageOptions)

#------------------------------------------------------------------------------
# set things up for testing, this configuration needs to occour before
# we enter the sub-directories
include(CTest)

#------------------------------------------------------------------------------
# Go to subdirectories
add_subdirectory ( Elastix )
add_subdirectory ( Wrapping )

#------------------------------------------------------------------------------
# ITK uses KWStyle for checking the coding style
include(${SimpleElastix_SOURCE_DIR}/Utilities/KWStyle/KWStyle.cmake)

#------------------------------------------------------------------------------
# set things up for testing, if enabled

if ( BUILD_TESTING )

  include( sitkAddTest )

  enable_testing()
  add_subdirectory ( Testing )

  set(BUILDNAME "${BUILDNAME}" CACHE STRING "Name of build on the dashboard")
  configure_file(CMake/CTestCustom.cmake.in CTestCustom.cmake)
endif()


#------------------------------------------------------------------------------
# Configure SimpleITKConfig.cmake for the build tree.
set(SimpleElastixConfig_TREE "build")
set(SimpleElastixConfig_CODE "")
set(SimpleElastixConfig_INCLUDE_DIRS ${SimpleElastix_INCLUDE_DIRS})

configure_file(SimpleElastixConfig.cmake.in
               SimpleElastixConfig.cmake @ONLY IMMEDIATE)

#------------------------------------------------------------------------------
# Configure SimpleITKConfig.cmake for the install tree.
set(SimpleElastixConfig_TREE "install")

set(SimpleElastixConfig_CODE "set(SimpleElastix_INSTALL_PREFIX \"\${_SimpleElastixConfig_DIR}\")")
# Construct the proper number of get_filename_component(... PATH)
# calls to compute the installation prefix.
string(REGEX REPLACE "/" ";" _count "${SimpleElastix_INSTALL_PACKAGE_DIR}")
foreach(p ${_count})
  set(SimpleElastixConfig_CODE "${SimpleElastixConfig_CODE}
get_filename_component(SimpleElastix_INSTALL_PREFIX \"\${SimpleElastix_INSTALL_PREFIX}\" PATH)")
endforeach(p)
set(SimpleElastixConfig_CODE "${SimpleElastixConfig_CODE}\n")

set(SimpleElastixConfig_INCLUDE_DIRS
  "\${SimpleElastix_INSTALL_PREFIX}/${SimpleElastix_INSTALL_INCLUDE_DIR}")

configure_file(SimpleElastixConfig.cmake.in
               CMakeFiles/SimpleElastixConfig.cmake @ONLY IMMEDIATE)

#------------------------------------------------------------------------------
# Help other projects use SimpleITK
configure_file(UseSimpleElastix.cmake.in
               UseSimpleElastix.cmake COPYONLY IMMEDIATE)

configure_file(SimpleITKConfigVersion.cmake.in
               SimpleITKConfigVersion.cmake @ONLY IMMEDIATE)

#------------------------------------------------------------------------------
# INSTALLATION

install(FILES ${SimpleElastix_BINARY_DIR}/CMakeFiles/SimpleElastixConfig.cmake
              ${SimpleElastix_BINARY_DIR}/SimpleITKConfigVersion.cmake
              ${SimpleElastix_BINARY_DIR}/UseSimpleElastix.cmake
  DESTINATION ${SimpleElastix_INSTALL_PACKAGE_DIR}
  COMPONENT Development)

install(EXPORT SimpleElastixTargets
  DESTINATION ${SimpleElastix_INSTALL_PACKAGE_DIR}
  COMPONENT Development)

file( GLOB __files
  ${CMAKE_SOURCE_DIR}/Elastix/include/[^.]*.h
  ${CMAKE_SOURCE_DIR}/Elastix/include/[^.]*.hxx
  )

install(FILES ${__files}
  DESTINATION ${SimpleElastix_INSTALL_INCLUDE_DIR}
  COMPONENT Development)

install(FILES ${SimpleITK_DOC_FILES} DESTINATION "${SimpleElastix_INSTALL_DOC_DIR}" COMPONENT Runtime)

#------------------------------------------------------------------------------
# CPack

set(CPACK_SOURCE_IGNORE_FILES  "${ITK_MODULES_DISABLED_CPACK};/\\\\.git")
set(CPACK_PACKAGE_VERSION_MAJOR "${SimpleITK_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${SimpleITK_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${SimpleITK_VERSION_PATCH}")


include( CPack )

if(BUILD_TESTING)
  if(COMMAND ExternalData_Add_Target )
    ExternalData_Add_Target( SimpleITKData )
  endif()
endif()
